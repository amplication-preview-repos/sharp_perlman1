/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Lesson } from "./Lesson";
import { LessonCountArgs } from "./LessonCountArgs";
import { LessonFindManyArgs } from "./LessonFindManyArgs";
import { LessonFindUniqueArgs } from "./LessonFindUniqueArgs";
import { CreateLessonArgs } from "./CreateLessonArgs";
import { UpdateLessonArgs } from "./UpdateLessonArgs";
import { DeleteLessonArgs } from "./DeleteLessonArgs";
import { Subject } from "../../subject/base/Subject";
import { Student } from "../../student/base/Student";
import { LessonService } from "../lesson.service";
@graphql.Resolver(() => Lesson)
export class LessonResolverBase {
  constructor(protected readonly service: LessonService) {}

  async _lessonsMeta(
    @graphql.Args() args: LessonCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Lesson])
  async lessons(@graphql.Args() args: LessonFindManyArgs): Promise<Lesson[]> {
    return this.service.lessons(args);
  }

  @graphql.Query(() => Lesson, { nullable: true })
  async lesson(
    @graphql.Args() args: LessonFindUniqueArgs
  ): Promise<Lesson | null> {
    const result = await this.service.lesson(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Lesson)
  async createLesson(@graphql.Args() args: CreateLessonArgs): Promise<Lesson> {
    return await this.service.createLesson({
      ...args,
      data: {
        ...args.data,

        subject: args.data.subject
          ? {
              connect: args.data.subject,
            }
          : undefined,

        student: args.data.student
          ? {
              connect: args.data.student,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Lesson)
  async updateLesson(
    @graphql.Args() args: UpdateLessonArgs
  ): Promise<Lesson | null> {
    try {
      return await this.service.updateLesson({
        ...args,
        data: {
          ...args.data,

          subject: args.data.subject
            ? {
                connect: args.data.subject,
              }
            : undefined,

          student: args.data.student
            ? {
                connect: args.data.student,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Lesson)
  async deleteLesson(
    @graphql.Args() args: DeleteLessonArgs
  ): Promise<Lesson | null> {
    try {
      return await this.service.deleteLesson(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Subject, {
    nullable: true,
    name: "subject",
  })
  async getSubject(@graphql.Parent() parent: Lesson): Promise<Subject | null> {
    const result = await this.service.getSubject(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Student, {
    nullable: true,
    name: "student",
  })
  async getStudent(@graphql.Parent() parent: Lesson): Promise<Student | null> {
    const result = await this.service.getStudent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
